/** Declaration file generated by dts-gen */

declare module "oauth" {
  export class OAuth {
    constructor (requestUrl: any, accessUrl: any, consumerKey: any, consumerSecret: any, version: any, authorize_callback: any, signatureMethod: any, nonceSize?: number | undefined, customHeaders?: object | undefined);

    authHeader (url: any, oauth_token: any, oauth_token_secret: any, method: any): any;

    delete (url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

    get (url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

    getOAuthAccessToken (oauth_token: any, oauth_token_secret: any, oauth_verifier: any, callback: any): void;

    getOAuthRequestToken (extraParams: any, callback: any): void;

    getProtectedResource (url: any, method: any, oauth_token: any, oauth_token_secret: any, callback: any): void;

    post (url: any, oauth_token: any, oauth_token_secret: any, post_body: any, post_content_type: any, callback: any): any;

    put (url: any, oauth_token: any, oauth_token_secret: any, post_body: any, post_content_type: any, callback: any): any;

    setClientOptions (options: any): void;

    signUrl (url: any, oauth_token: any, oauth_token_secret: any, method: any): any;

  }

  export class OAuth2 {
    constructor (clientId: any, clientSecret: any, baseSite: any, authorizePath: any, accessTokenPath: any, customHeaders: any);

    buildAuthHeader (token: any): any;

    get (url: any, access_token: any, callback: any): void;

    getAuthorizeUrl (params: any): any;

    getOAuthAccessToken (code: any, params: any, callback: any): void;

    getProtectedResource (url: any, access_token: any, callback: any): void;

    setAccessTokenName (name: any): void;

    setAgent (agent: any): void;

    setAuthMethod (authMethod: any): void;

    useAuthorizationHeaderforGET (useIt: any): void;

  }

  export class OAuthEcho {
    constructor (realm: any, verify_credentials: any, consumerKey: any, consumerSecret: any, version: any, signatureMethod: any, nonceSize: any, customHeaders: any);

    authHeader (url: any, oauth_token: any, oauth_token_secret: any, method: any): any;

    delete (url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

    get (url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

    getOAuthAccessToken (oauth_token: any, oauth_token_secret: any, oauth_verifier: any, callback: any): void;

    getOAuthRequestToken (extraParams: any, callback: any): void;

    getProtectedResource (url: any, method: any, oauth_token: any, oauth_token_secret: any, callback: any): void;

    post (url: any, oauth_token: any, oauth_token_secret: any, post_body: any, post_content_type: any, callback: any): any;

    put (url: any, oauth_token: any, oauth_token_secret: any, post_body: any, post_content_type: any, callback: any): any;

    setClientOptions (options: any): void;

    signUrl (url: any, oauth_token: any, oauth_token_secret: any, method: any): any;
  }
}
